input() : 한 줄의 문자열을 입력 받는 함수입니다.
map() : 리스트의 모든 원소에 각각 특정한 함수를 적용할 때 사용합니다.

data = list(map(int, input().split()))
a, b, c = (map(int, input().split()))


빠르게 입력 받기
import sys

data = sys.stdin.readline().rstrip()
print(data)
단, 입력 후 엔터가 줄바꿈 기호로 입력되모로 rstrip()와 함께 사용합니다.

answer = 7
print(f"정답은 {answer}입니다.")


조건문
프로그램의 흐름을 제어하는 문법입니다.
if ~ elif ~ else


들여쓰기
코드의 블록을 들여쓰기로 지정합니다.(4개의 공백 문자)


비교 연산자
특정한 두 값을 비교할 때 이용
X == Y
X != Y
X > Y
X < Y
X >= Y
X <= Y


논리 연산자
논리 값 사이의 연산을 수행
X and Y
X or Y
not X


기타 연산자
리스트, 튜플, 문자열, 딕셔너리 모두 사용 가능
x in 리스트
x not in 문자열


아무것도 처리 하고 싶지 않을 때 pass 키워드

score = 85
result = "Success" if score >=80 else "Fail"

print(result)


반복문
for문
for 변수 in 리스트:
	실행할 소스코드

range(시작 값, 끝 값 +1)
인자를 하나만 넣으면 자동으로 시작값은 0이 됩니다.


continue
반복문에서 남은 코드의 실행을 건너뛰고, 다음 반복을 진행할 때 사용합니다.

break
반복문을 즉시 탈출할 때 사용합니다.


함수
특정한 작업을 하나의 단위로 묶어 놓은 것을 말합니다.

* 내장 함수 : 파이썬이 기본적으로 제공하는 함수
* 사용자 정의 함수 : 개발자가 직접 정의해 사용하는 함수

def 함수명(매개변수):
	실행할 소스코드
	return 반환 값

매개변수 : 함수 내부에서 사용할 변수
반환 값 : 함수에서 처리 된 결과

파라미터 지정
def add(a, b):
	print("함수의 결과", a + b)

add(b=3, a=7)


global 키워드
함수 바깥에 선언된 변수를 바로 참조

여러 개의 반환 값
함수는 여러개의 반환 값을 가질 수 있습니다.


람다 표현식
함수를 간단하게 작성합니다.
array = [('홍길동', 50), ('이순신', 32), ('아무개', 74)]
print(sorted(array, key=lambda x: x[1]))


list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

result = map(lambda a, b: a+b, list1, list2)

print(list(result))


자주 사용되는 내장 함수
result = sum([1, 2, 3, 4, 5])
print(result)

min_result = min(7, 3, 5, 2)
max_result = max(7, 3, 5, 2)
print(min_result, max_result)

result = eval("(3+5)*7")
print(result)

result = sorted([9, 1, 8, 5, 4])
reverse_result = sorted([9, 1, 8, 5, 4], reverse=True)
print(result)
print(reverse_result)

array = [('홍길동', 35), ('이순신', 75), ('아무개', 50)]
result = sorted(array, key=lambda x: x[1], reverse=True)
print(result)


순열 : 서로 다른 n개에서 서로 다른 r개를 선택해 일렬로 나열하는 것입니다.
from itertools import permutations as per

data = ['A', 'B', 'C']

result = list(per(data, 3))
print(result)

조합 : 서로 다른 n개에서 순서에 상관없이 서로 다른 r개를 선택하는 것입니다.
from itertools import combinations as comb

data = ['A', 'B', 'C']

result = list(comb(data, 2))
print(result)

중복 순열
from itertools import product

data = ['A', 'B', 'C']

result = list(product(data, repeat=3))
print(result)

중복 조합
from itertools import combinations_with_replacement as cwr

data = ['A', 'B', 'C']

result = list(cwr(data, 2))
print(result)


Counter
내부의 원소가 몇 번씩 등장했는지를 알려줍니다.
from collections import Counter

counter = Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])

print(counter['blue'])
print(counter['green'])
print(dict(counter)) #사전 자료형으로 반환


최대 공약수와 최소 공배수
최대 공약수는 math 라이브러리의 gcd() 함수 이용.
import math

#최소 공배수(LCM)를 구하는 함수
def lcm(a, b):
  return a * b // math.gcd(a, b)

a = 21
b = 14

print(math.gcd(21, 14)) #최대 공약수
print(lcm(21, 14)) #최소 공배수