1) 복잡도 : 알고리즘의 성능을 나타내는 척도입니다.
* 시간 복잡도 : 특정한 크기의 입력에 대해 알고리즘의 수행 시간 분석
* 공간 복잡도 : 특정한 크기의 입력에 대해 알고리즘의 메모리 사용량 분석
동일한 기능을 수행하는 알고리즘이 있다면, 복잡도가 낮을수록 좋은 알고리즘입니다.

2) 빅오 표기법
가장 빠르게 증가하는 항만을 고려하는 표기법입니다.
함수의 상한만을 나타냅니다.
예를 들어 연산 횟수가 3N³ + 5N² + 1,000,000인 알고리즘이 있다면
빅오 표기법에서는 차수가 가장 큰 항만 남기므로 O(N³)입니다.

빅오 표기법
좋음
	O(1) : 상수시간
	O(logN) : 로그 시간
	O(N) : 선형 시간
	O(NlogN) : 로그 선형 시간
	O(N²) : 이차 시간
	O(N³) : 삼차 시간
	O(2ⁿ) : 지수 시간
나쁨

문제에서 가장 먼저 확인해야 하는 내용은 시간제한(수행시간 요구시간)입니다.
시간제한이 1초인 문제를 만났을 때,
* n의 범위가 500인 경우 : 시간 복잡도가 O(N³)인 알고리즘 설계
* n의 범위가 2,000인 경우 : 시간 복잡도가 O(N²)인 알고리즘 설계
* n의 범위가 100,000인 경우 : 시간 복잡도가 O(NlogN)인 알고리즘 설계
* n의 범위가 10,000,000인 경우 : 시간 복잡도가 O(N)인 알고리즘 설계

알고리즘의 문제 해결 과정
1. 지문 읽기 및 컴퓨터적 사고
2. *요구사항(복잡도) 분석*
3. 문제 해결을 위한 아이디어 찾기
4. 소스코드 설계 및 코딩
