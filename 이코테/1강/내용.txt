1) 복잡도 : 알고리즘의 성능을 나타내는 척도입니다.
* 시간 복잡도 : 특정한 크기의 입력에 대한 알고리즘의 수행 시간을 분석한 것입니다.
* 공간 복잡도 : 특정한 크기의 입력에 대한 알고리즘의 메모리 사용량을 분석한 것입니다.
동일한 기능을 수행하는 알고리즘이 있다면, 복잡도가 낮을수록 좋은 알고리즘입니다.


2) 빅오 표기법 : 가장 빠르게 증가하는 항만을 고려하는 표기법입니다. 함수의 상한만 나타냅니다.
예를들어, 3N³ + 5N² + 1,000,000인 알고리즘이 있다면 O(N³)으로 표현됩니다.

3) 빅오 표기법
좋음
	O(1) : 상수 시간
	O(logN) : 로그 시간
	O(N) : 선형 시간
	O(NlogN) : 로그 선형 시간
	O(N²) : 이차 시간
	O(N³) : 삼차 시간
	O(2ⁿ) : 지수 시간
나쁨


4) 시간 복잡도 계산하기
* N개의 데이터의 합을 계산하는 예제
array = [3, 5, 1, 2, 4] # 5개의 데이터 (N=5)
summary = 0 # 합계를 저장할 변수

# 모든 데이터를 하나씩 확인하며 합계를 계산
for x in array:
	summary += x

# 결과를 출력
print(summary)

* 수행 시간은 데이터의 개수 N에 비례할 것임을 예측할 수 있습니다.
* 시간 복잡도 : O(N)


5) 시간 복잡도 계산하기
* 2중 반복문을 이용하는 예제
array = [3, 5, 1, 2, 4] # 5개의 데이터 (N = 5)

for i in array:
	for j in array:
		temp = i * j
		print(temp)

* 시간 복잡도 : O(N²)
* 모든 2중 반복문의 시간 복잡도가 O(N²)은 아닙니다.
* 소스 코드가 내부적으로 다른 함수를 호출한다면 그 함수의 시간 복잡도까지 고려해야 합니다.


* 코딩 테스트 문제에서 시간 제한은 통상 1~5초 가량이고, 문제에 명시되어 있지 않아도 대략 5초 정도라고 생각하고 풀어야 합니다.
* 문제에서는 가장 먼저 시간제한(수행시간 요구사항)을 확인해야 합니다.
* 시간 제한이 1초인 문제의 경우, 일반적으로
	* N의 범위가 500인 경우 : 시간 복잡도가 O(N³)인 알고리즘을 설계합니다.
	* N의 범위가 2,000인 경우 : 시간 복잡도가 O(N²)인 알고리즘을 설계합니다.
	* N의 범위가 100,000인 경우 : 시간 복잡도가 O(NlogN)인 알고리즘을 설계합니다.
	* N의 범위가 10,000,000인 경우 : 시간 복잡도가 O(N)인 알고리즘을 설계합니다.


* 알고리즘 문제 해결 과정
1. 지문 읽기 및 컴퓨터적 사고
2. 요구사항(복잡도) 분석
3. 문제 해결을 위한 아이디어 찾기
4. 소스코드 설계 및 코딩
