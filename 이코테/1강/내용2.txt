* 자료형
모든 프로그래밍은 결국 데이터를 다루는 행위입니다.

* 파이썬의 자료형
정수형, 실수형, 복소수형, 문자열, 리스트, 튜플, 사전 등이 있습니다.


1) 정수형
정수를 다루는 자료형입니다.
양의 정수, 음의 정수, 0이 포함됩니다.


2) 실수형
소수점 아래의 데이터를 포함하는 수 자료형입니다.
파이썬에서는 변수에 소수점을 붙인 수를 대입하면 실수형 변수로 처리됩니다.
소수부가 0이거나, 정수부가 0인 소수는 0을 생략하고 작성할 수 있습니다.
컴퓨터 시스템은 실수 정보를 표현하는 정확도에 한계를 가집니다.
예를 들어 10진수 체계에서 0.3과 0.6을 더하면 0.9로 정확히 떨어지지만
2진수에서는 0.9를 정확히 표현할 수 없습니다.
실수 값의 원하는 결과를 얻으려면 round()함수를 이용해야 합니다.

3) 지수 표현 방식
파이썬에서는 e나 E를 이용한 지수 표현 방식을 이용할 수 있습니다.
e나 E 다음에 오는 수는 10의 지수부를 의미합니다.
예를 들어 1e9라고 입력하면 10의 9제곱이 됩니다.
최단 경로 알고리즘에서는 도달할 수 없는 노드에 대한 최단거리를 무한(INF)로 설정하곤 합니다.
이때 가능한 최대값이 10억 미만이라면 무한(INF)의 값으로 1e9를 이용할 수 있습니다. 


수 자료형의 연산
주로 사칙연산과 나머지 연산자가 많이 나옵니다.
파이썬에서 나누기 연산자(/)는 실수형으로 반환합니다.

다양한 로직을 설계할 때는 나머지 연산자(%)를 이용합니다.
* a가 홀수인지 체크할 경우

몫을 얻기 위해서는 몫 연산자(//)를 사용합니다.
이외에도 거듭 제곱 연산자(**)를 사용합니다.
* 제곱근 a ** 0.5

*****
리스트 자료형
여러 개의 데이터를 연속적으로 담아 처리하기 위한 자료형입니다.
배열 혹은 테이블이라고도 부릅니다.
* 대괄호 [] 안에 원소를 넣어 초기화하고, 쉼표(,)로 구분합니다.
* 비어 있는 리스트를 선언하려면 list() 혹은 []를 이용합니다.
* 리스트에 접근 할때는 인덱스 값을 괄호에 넣습니다.
* 인덱스는 0부터 시작합니다.

* 리스트 초기화
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

print(a[3])

n = 10
a = [0] * n
print(a)

* 리스트의 인덱싱과 슬라이싱
인덱싱 : 리스트의 특정한 원소에 접근하는 것입니다.
양의 정수와 음의 정수 모두 사용 가능합니다.
음의 정수를 넣으면 원소를 거꾸로 탐색합니다.
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a[7])

print(a[-1])

print(a[-3])

a[3] = 7
print(a)

* 슬라이싱 : 연속적인 위치를 갖는 원소들을 가져올 때 사용합니다.
대괄호 안에 콜론(:)을 넣어 시작 인덱스와 끝 인덱스를 설정합니다.
끝 인덱스는 실제 인덱스보다 1을 더 크게 설정합니다.
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a[3])

print(a[1:4])


* 리스트 컴프리헨션 : 대괄호 안에 조건문과 반복문을 적용해 리스트를 초기화하는 방법입니다.
array = [i for i in range(20) if i % 2 == 1]
print(array)

array = [i * i for i in range(1, 10)]
print(array)

2차원 리스트를 초기화할 때 효과적입니다.
* N * M 크기의 2차원 리스트 초기화
array = [[0] * m for _ in range(n)]

n = 4
m = 3
array = [[0] * m for _ in range(n)]
print(array)

_는 파이썬에서 반복을 수행하되 반복을 위한 변수 값을 무시하고자 할 때 사용합니다.